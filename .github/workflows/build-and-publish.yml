name: Build and Publish Docker Images

on:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      id: buildx

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version information
      if: github.event_name == 'release'
      id: version
      run: |
        echo "Extracting version from release tag"
        version=$(echo "${{ github.event.release.tag_name }}" | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+$')
        
        if [ -z "$version" ]; then
          echo "Could not extract version from tag: ${{ github.event.release.tag_name }}"
          exit 1
        fi

        echo "::set-output name=version::$version"
        
        major=$(echo $version | cut -d. -f1)
        minor=$(echo $version | cut -d. -f2)
        patch=$(echo $version | cut -d. -f3)

        echo "::set-output name=major::$major"
        echo "::set-output name=minor::$minor"
        echo "::set-output name=patch::$patch"

    - name: Extract repository name
      id: extract_repo
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | awk -F/ '{print $2}')
        echo "::set-output name=repo_name::$REPO_NAME"

    - name: Build and push Docker image (main or release)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ github.event_name == 'release' && github.event.release.tag_name != '' && format('ghcr.io/{0}/{1}:latest', github.repository_owner, steps.extract_repo.outputs.repo_name) || '' }}
          ${{ github.event_name == 'release' && github.event.release.tag_name != '' && format('ghcr.io/{0}/{1}:{2}', github.repository_owner, steps.extract_repo.outputs.repo_name, github.event.release.tag_name) || '' }}
          ${{ github.event_name == 'release' && github.event.release.tag_name != '' && format('ghcr.io/{0}/{1}:{2}', github.repository_owner, steps.extract_repo.outputs.repo_name, steps.version.outputs.version) || '' }}
          ${{ github.event_name == 'release' && github.event.release.tag_name != '' && format('ghcr.io/{0}/{1}:{2}', github.repository_owner, steps.extract_repo.outputs.repo_name, steps.version.outputs.major) || '' }}
          ${{ github.event_name == 'release' && github.event.release.tag_name != '' && format('ghcr.io/{0}/{1}:{2}.{3}', github.repository_owner, steps.extract_repo.outputs.repo_name, steps.version.outputs.major, steps.version.outputs.minor) || '' }}
          ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && format('ghcr.io/{0}/{1}:edge', github.repository_owner, steps.extract_repo.outputs.repo_name) || '' }}
